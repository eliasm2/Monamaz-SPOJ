import java.util.*;
import java.lang.*;

import java.util.Scanner;

class map {
    adj[] mapa;
    int count=0;
    map (int size){
        mapa = new adj[size];
    }
    public void add(int x, int y){
        mapa[count]=new adj(y,x);
        count++;
       
    }
    public void buildAdj(){
        for (int it=0; it< mapa.length;it++){
            for (int tp=0; tp< 2;tp++){
            if(mapa[it].canAdj()){
                int close=99999;
                int point=-1;
                 for (int i=0; i< mapa.length;i++){
                     if(mapa[i].canAdj() && mapa[i].canAdj(it)){
                         if (close>Math.abs(mapa[it].pValue-mapa[i].pValue) && mapa[it].pValue-mapa[i].pValue!=0){
                            close=mapa[it].pValue-mapa[i].pValue;
                            point=i;
                        }else if(0==mapa[it].pValue-mapa[i].pValue && it!=i){
                            if(point!=-1 && adj.testeOS(mapa[i],mapa[point])){
                                point=i;
                        }
                     }
                     }
                 }
                 if (point!=-1 && mapa[it].canAdj() && mapa[point].canAdj() ){
                     mapa[point].addAdj(it);
                     mapa[it].addAdj(point);
                     
                 }
            }
            }    
        }
    }
    boolean isConnected(){
        for(adj Point : mapa){
            if (!Point.isConnected)
                return false;
        }
        return true;
    }
}
class adj{
    public int pValue;
    int x;
    int y;
    int counta=0;
    boolean isConnected = false;
    int[] adjto = {-1,-1};
    adj(int x,int y){
        this.pValue=(int) Math.ceil((Math.abs(x)+Math.abs(y)/2));
        this.x=x;
        this.y=y;
    }
    boolean canAdj(){
        if (counta<2)
            return true;
        else
            return false;
    }
    void addAdj(int toadd){
        if (counta<2){
        adjto[counta]=toadd;
        counta++;
        isConnected =true;
        }
    }
    static boolean testeOS(adj F, adj S){
        if (F.x<S.x)
            return true;
        else if (F.x>S.x)
            return false;
        else if (F.x==S.x){
            if (F.y>S.y)
                return true;
            else
                return false;
    }
        else
            return false;
    }
    boolean canAdj(int Pos){
        for (int Pts : adjto){
            if (Pts==Pos)
                return false;
        }
        return true;
    }
}


class Main
{
public static void main (String[] args) throws java.lang.Exception
{
 ArrayList <map> testes = new ArrayList();
        Scanner scanner = new Scanner(System.in);
        while (true){
        String ler = scanner.nextLine();
        if (ler.equals("0"))
            break;
        testes.add(new map(Integer.parseInt(ler)));
        ler = scanner.nextLine();;
        String[] entrada = ler.split(" ");
        for (int i=0; i< entrada.length; i=i+2){
            testes.get(testes.size()-1).add(Integer.parseInt(entrada[i]), Integer.parseInt(entrada[i+1]));
        }
        testes.get(testes.size()-1).buildAdj();
        }
        for (map test : testes){
            if(test.isConnected()){
                System.out.println("All stations are reachable.");
            }
            else
                System.out.println("There are stations that are unreachable.");
        }
    }

}
